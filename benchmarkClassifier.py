
import time

# List containing predefined malware rates.
HIGH_MALWARE_RATES = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]  # High: 10 - 100%
LOW_MALWARE_RATES = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]  # Low: 1 - 10%


def time_classifier(classifier, size_of_training_set, number_of_runs, m_rate, data):
    """

    :param classifier:
    :param size_of_training_set:
    :param number_of_runs:
    :param m_rate:
    :param data:
    :return:
    """

    path_to_file = "benchmarks.csv"
    results = []

    for run in range(number_of_runs):
        training_data, testing_data, training_labels, testing_labels = data.partition_data(size_of_training_set)

        start_time = time.time()
        classifier.fit(training_data, training_labels)
        train_time = time.time() - start_time

        start_time = time.time()
        classifier.predict(testing_data)
        predict_time = time.time() - start_time

        start_time = time.time()
        classifier.calculate_accuracy(testing_data, testing_labels)
        accuracy_time = time.time() - start_time

        classifier.create_confusion_matrix(testing_labels)

        results.append((train_time, predict_time, accuracy_time, classifier.accuracy,
                        classifier.confusion_matrix))

    header = (f"Size of training set: {size_of_training_set}, Malware rate: {m_rate}\n"
              f"Train time, Predict time, Accuracy time, Accuracy, True positive, "
              f"False positive, True negative, False negative\n")

    with open(path_to_file, "a") as benchmark_file:
        benchmark_file.write(header)

    for index, result in enumerate(results):
        result_as_arr = list(result)
        result_as_arr[4] = ",".join(str(confusion_point) for row in result[4] for confusion_point in row)
        result_as_str = ",".join(str(result) for result in result_as_arr)
        print(result_as_str)

        with open(path_to_file, "a") as benchmark_file:
            benchmark_file.write(f"{result_as_str}\n")


def time_mist_extraction(mist_extractor):
    """

    :param mist_extractor:
    :return:
    """

    start = time.time()
    mist_extractor.extract_mist()
    end = time.time() - start

    print(f"Time take to extract feature from mist files: {end}")


def time_json_extraction(json_extractor):
    """

    :param json_extractor:
    :return:
    """

    start = time.time()
    json_extractor.extract_mist()
    end = time.time() - start

    print(f"Time take to extract feature from json files: {end}")


def select_malware_rates(rate_type):

    if rate_type == "LOW":
        return LOW_MALWARE_RATES
    return HIGH_MALWARE_RATES


def test_and_output():
    classifier.predict(testing_data)
    classifier.create_confusion_matrix(testing_labels, data_manager.label_names)
    classifier.calculate_accuracy(testing_data, testing_labels)
    classifier.export_tree_as_pdf(data_manager.feature_names, data_manager.label_names)

    print(f"Accuracy: {classifier.accuracy}")
    classifier.display_confusion_matrix(testing_labels, data_manager.label_names)      


def multiple_malware_rates(data_manager, test_size, test_malware_rates, classifier):
    """
    Train and predict with the same malware rate.
    Select malware rates
    For each rate
        Load data
        Partition data
        Train classifier
        Test classifier
    :param data_manager:
    :param malware_rates:
    :param test_size:
    :param classifier:
    :return:
    """

    # Select malware rate
    malware_rates = select_malware_rates(test_malware_rates)

    for malware_rate in malware_rates:

        data_manager.load_data(malware_rate)

        print(f"Decision Tree with : {malware_rate} malware rate")
        training_data, testing_data, training_labels, testing_labels = data_manager.partition_data(test_size)

        classifier.fit(training_data, training_labels)
        
        test_and_output()


def fixed_malware_rate(data_manager, test_size, training_malware_rate, test_malware_rates, classifier):
    """
    Train and predict with different malware rates.
    Selectc malware rates
    Load data with fixed rate
    Partition data with fixed rate
    Train classifier with fixed rate
    For each rate
        Load data which was not used during training
        Partition data
        Test classifier
    :param training_malware_rate:
    :param test_malware_rates:
    :param test_size:
    :return:
    """

    malware_rates = select_malware_rates(test_malware_rates)

    data_manager.load_data(training_malware_rate)

    print(f"Training Decision Tree with : {training_malware_rate} maware rate")
    training_data, testing_data, training_labels, testing_labels = data_manager.partition_data(test_size)

    classifier.fit(training_data, training_labels)

    old_training = training_data
    old_labels = training_labels

    for malawre_rate in malware_rates:

        data_manager.load_unique(old_training, old_labels, malawre_rate)

        print(f"Testing Decision Tree with : {malawre_rate} maware rate")
        training_data, testing_data, training_labels, testing_labels = data_manager.partition_data(test_size)

        test_and_output()
