
from dataset import Dataset
from decisionTreeClassifier import DecisionTreeClassifier
import time


def run_benchmarks(size_of_training_set, number_of_runs, m_rate):

    path_to_file = "/home/marcus/PycharmProjects/Final_Project/benchmarks.csv"
    results = []

    for run in range(number_of_runs):
        training_data, testing_data, training_labels, testing_labels = data.partition_data(size_of_training_set)

        start_time = time.time()
        tree_classifier.train_model(training_data, training_labels)
        train_time = time.time() - start_time

        start_time = time.time()
        tree_classifier.predict(testing_data)
        predict_time = time.time() - start_time

        start_time = time.time()
        tree_classifier.calculate_accuracy(testing_data, testing_labels)
        accuracy_time = time.time() - start_time

        tree_classifier.create_confusion_matrix(testing_labels)

        results.append((train_time, predict_time, accuracy_time, tree_classifier.accuracy,
                        tree_classifier.confusion_matrix))

    header = (f"Size of training set: {size_of_training_set}, Malware rate: {m_rate}\n"
              f"Train time, Predict time, Accuracy time, Accuracy, True positive, "
              f"False positive, True negative, False negative\n")

    with open(path_to_file, "a") as benchmark_file:
        benchmark_file.write(header)

    for index, result in enumerate(results):
        result_as_arr = list(result)
        result_as_arr[4] = ",".join(str(confusion_point) for row in result[4] for confusion_point in row)
        result_as_str = ",".join(str(result) for result in result_as_arr)
        print(result_as_str)

        with open(path_to_file, "a") as benchmark_file:
            benchmark_file.write(f"{result_as_str}\n")


malware_rate = 0.33
test_set_size = 0.33
benchmark_iterations = 5
malware_rates = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]

data = Dataset()
data.load_data(malware_rate)

tree_classifier = DecisionTreeClassifier()

for rate in malware_rates:
    run_benchmarks(test_set_size, benchmark_iterations, rate)

"""
training_data, testing_data, training_labels, testing_labels = data.partition_data(0.33)

# Create model
tree_classifier = DecisionTreeClassifier()
tree_classifier.train_model(training_data, training_labels)

# Predict
tree_classifier.predict(testing_data)
tree_classifier.calculate_accuracy(testing_data, testing_labels)

# Create pdf of decision tree
tree_classifier.export_tree_as_pdf(data.feature_names, data.label_names)

print(f"Accuracy: {tree_classifier.accuracy}")

tree_classifier.print_confusion_matrix(testing_labels)
"""