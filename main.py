
from dataset import Dataset
from decisionTreeClassifier import DecisionTreeClassifier


def run_benchmarks(size_of_training_set, number_of_runs):
      results = []
      for run in range(number_of_runs):
            training_data, testing_data, training_labels, testing_labels = data.partition_data(size_of_training_set)
            results.append((tree_classifier.benchmark_tree_classifier(training_data, testing_data,
                                                                     training_labels, testing_labels),
                           tree_classifier.accuracy, tree_classifier.create_confusion_matrix(testing_labels)))

      header = f"Size of training set: {size_of_training_set}"
      with open("/home/marcus/PycharmProjects/Final_Project/benchmarks", "a") as benchmark_file:
            benchmark_file.write(header)

      for index, result in enumerate(results):
            out = (f"\n--------Benchmark---{index}-----------------\n"
                  f"Time taken to train model: {result[0][0]}\nTime taken to predict new data: {result[0][1]}\n"
                  f"Time taken to calculate accuracy: {result[0][2]}\nAccuracy: {result[1]}\n{result[2]}")
            print(out)

            with open("/home/marcus/PycharmProjects/Final_Project/benchmarks", "a") as benchmark_file:
                  benchmark_file.write(out)

# Prepare data
data = Dataset()
data.load_data(0)

print(len(data.features))
print(len(data.labels))
tree_classifier = DecisionTreeClassifier()

run_benchmarks(0.33, 1000)

"""
training_data, testing_data, training_labels, testing_labels = data.partition_data(0.33)

# Create model
tree_classifier = DecisionTreeClassifier()
tree_classifier.train_model(training_data, training_labels)

# Predict
tree_classifier.predict(testing_data)
tree_classifier.calculate_accuracy(testing_data, testing_labels)

# Create pdf of decision tree
tree_classifier.export_tree_as_pdf(data.feature_names, data.label_names)

print(f"Accuracy: {tree_classifier.accuracy}")

tree_classifier.print_confusion_matrix(testing_labels)
"""