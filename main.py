
from decisionTreeClassifier import DecisionTreeClassifier
from randomForestClassifier import RandomForestClassifier
from featureExtraction import FeatureExtraction
from sklearn.metrics import confusion_matrix
from dataset import Dataset

import time
import numpy as np
import matplotlib.pyplot as plt


def run_timing_benchmarks(size_of_training_set, number_of_runs, m_rate):

    path_to_file = "/home/marcus/PycharmProjects/Final_Project/benchmarks.csv"
    results = []

    for run in range(number_of_runs):
        training_data, testing_data, training_labels, testing_labels = data.partition_data(size_of_training_set)

        start_time = time.time()
        tree_classifier.fit(training_data, training_labels)
        train_time = time.time() - start_time

        start_time = time.time()
        tree_classifier.predict(testing_data)
        predict_time = time.time() - start_time

        start_time = time.time()
        tree_classifier.calculate_accuracy(testing_data, testing_labels)
        accuracy_time = time.time() - start_time

        tree_classifier.create_confusion_matrix(testing_labels)

        results.append((train_time, predict_time, accuracy_time, tree_classifier.accuracy,
                        tree_classifier.confusion_matrix))

    header = (f"Size of training set: {size_of_training_set}, Malware rate: {m_rate}\n"
              f"Train time, Predict time, Accuracy time, Accuracy, True positive, "
              f"False positive, True negative, False negative\n")

    with open(path_to_file, "a") as benchmark_file:
        benchmark_file.write(header)

    for index, result in enumerate(results):
        result_as_arr = list(result)
        result_as_arr[4] = ",".join(str(confusion_point) for row in result[4] for confusion_point in row)
        result_as_str = ",".join(str(result) for result in result_as_arr)
        print(result_as_str)

        with open(path_to_file, "a") as benchmark_file:
            benchmark_file.write(f"{result_as_str}\n")


def run_benchmark_for_mist_extraction():

    fe = FeatureExtraction()

    start = time.time()
    fe.extract_mist()
    end = time.time() - start

    print(f"Time take to extract mist files: {end}")


def plot_confusion_matrix(y_true, y_pred, classes,
                          normalize=False,
                          title=None,
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if not title:
        if normalize:
            title = 'Normalized confusion matrix'
        else:
            title = 'Confusion matrix, without normalization'

    # Compute confusion matrix
    cm = confusion_matrix(y_true, y_pred)
    # Only use the labels that appear in the data
    #classes = classes[unique_labels(y_true, y_pred)]
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    fig, ax = plt.subplots()
    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax)
    # We want to show all ticks...
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           # ... and label them with the respective list entries
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, format(cm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")
    fig.tight_layout()
    return ax


def print_results_for_forest_and_tree():
    print(f"Tree accuracy: {tree_classifier.accuracy}")
    print(f"Forrest accuracy: {forest_classifier.accuracy}")

    print(f"Tree cross: {tree_classifier.cross_score.mean()}")
    print(f"Forrest cross: {forest_classifier.cross_score.mean()}")

    print("Tree")
    tree_classifier.print_confusion_matrix()
    print("Forest")
    forest_classifier.print_confusion_matrix()

    tree_classifier.export_tree_as_pdf(data.feature_names, data.label_names)
    forest_classifier.export_trees_as_pdf(data.feature_names, data.label_names)


def dysplay_confusion_matrix():

    np.set_printoptions(precision=2)

    # Plot non-normalized confusion matrix
    plot_confusion_matrix(testing_labels, tree_classifier.predicted_labels, classes=data.label_names,
                          title='Confusion matrix, without normalization')

    # Plot normalized confusion matrix
    plot_confusion_matrix(testing_labels, tree_classifier.predicted_labels, classes=data.label_names, normalize=True,
                          title='Normalized confusion matrix')

    plt.show()

malware_rate = 0.33
test_set_size = 0.33
benchmark_iterations = 5
k_fold = 5
malware_rates = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]

data = Dataset()
data.load_data(malware_rate)

training_data, testing_data, training_labels, testing_labels = data.partition_data(test_set_size)

tree_classifier = DecisionTreeClassifier()
forest_classifier = RandomForestClassifier()

tree_classifier.fit(training_data, training_labels)
forest_classifier.fit(training_data, training_labels)

tree_classifier.calculate_accuracy(testing_data, testing_labels)
forest_classifier.calculate_accuracy(testing_data, testing_labels)

tree_classifier.cross_validate(data.features, data.labels, k_fold)
forest_classifier.cross_validate(data.features, data.labels, k_fold)

tree_classifier.predict(testing_data)
forest_classifier.predict(testing_data)

tree_classifier.create_confusion_matrix(testing_labels, data.label_names)
forest_classifier.create_confusion_matrix(testing_labels, data.label_names)

# dysplay_confusion_matrix()

run_benchmark_for_mist_extraction()