
import os
from itertools import groupby
import numpy as np


class Report:

    report_dir = "Reports"

    report_header = "Classifier Name, Dataset Name, Malware Rate Train, Malware Rate Test, Accuracy," \
                    "Normalized true positive, Normalized true negative, Normalized false negative," \
                    "Normalized false positive, Unnormalized true positive, Unnormalized true negative," \
                    "Unnormalized false negative, Unnormalized false positive\n"

    def __init__(self):
        self.new_report = ""
        self.curr_report_num = self.calculate_current_report_number()
        self.curr_report_dir = os.path.join(Report.report_dir, str(self.curr_report_num))

    def build_report(self, classifier_name, dataset_name, malware_rate_train, malware_rate_test, accuracy,
                     conf_matrix_norm, conf_matrix_unnorm):

        temp_rep = list()

        temp_rep.append(classifier_name)
        temp_rep.append(dataset_name)
        temp_rep.append(malware_rate_train)
        temp_rep.append(malware_rate_test)
        temp_rep.append(accuracy)

        for i in np.nditer(conf_matrix_norm):
            temp_rep.append(float(i))

        for i in np.nditer(conf_matrix_unnorm):
            temp_rep.append(int(i))

        self.new_report = ','.join(str(i) for i in temp_rep)

        self.new_report += "\n"

    def does_report_folder_exist(self):
        return os.path.isdir(Report.report_dir)

    def does_curr_report_folder_exist(self):
        return os.path.isdir(self.curr_report_dir)

    def calculate_current_report_number(self):
        if self.does_report_folder_exist():
            return len(os.listdir(Report.report_dir)) + 1

        else:  # Not necessary if method is always called after creating the Reports directory.
            return 1

    def create_new_report_directory(self):

        if not self.does_report_folder_exist():
            os.mkdir(Report.report_dir)

        if not self.does_curr_report_folder_exist():
            os.mkdir(self.curr_report_dir)

    def save_report(self):

        self.create_new_report_directory()

        with open(os.path.join(self.curr_report_dir, 'report.csv'), 'w') as new_report:
            new_report.write(Report.report_header)
            new_report.write(self.new_report)

    def list_reports(self):
        return ' '.join(os.listdir(Report.report_dir))

    def create_master_report(self):  # TODO: Improve !!!

        master_report = []
        classifier_name_pos = 0
        dataset_name_pos = 1
        malware_rate_pos = 2

        if self.does_report_folder_exist():

            # Load all reports into master_report
            for report in next(os.walk(Report.report_dir))[1]:

                csv_path = os.path.join(Report.report_dir, os.path.join(report, "report.csv"))

                with open(csv_path) as csv_report:
                    csv_report.readline()  # Skip header
                    master_report.append(csv_report.readline().split(','))

            # Sort and group by Classifier Name
            master_report.sort(key=lambda row: row[classifier_name_pos].upper())
            master_report = [
                list(group) for _, group in groupby(master_report, key=lambda row: row[classifier_name_pos])]

            # Sort and group by Dataset Name
            temp_master = []  # master report now contains lists which are 2D (master is 3D)
            for classifier_name in master_report:  # classifier_name is a 2D list
                classifier_name.sort(key=lambda row: row[dataset_name_pos].upper())
                temp_master.append(
                    [list(group) for _, group in groupby(classifier_name, key=lambda row: row[dataset_name_pos])])

            # Sort by Malware Rate
            for classifier_name in temp_master:
                for dataset_name in classifier_name:
                    dataset_name.sort(key=lambda row: row[malware_rate_pos].upper())

            # Merge all sub lists into one list of strings
            del master_report[:]
            for classifier_name in temp_master:  # temp master is a 4D list
                for dataset_name in classifier_name:
                    for row in dataset_name:
                        master_report.append(','.join(row))  # csv format

            with open(os.path.join(Report.report_dir, "master report.csv"), 'w') as csv_file:
                for row in master_report:
                    csv_file.write(row)

        else:
            print("No Reports folder!")
