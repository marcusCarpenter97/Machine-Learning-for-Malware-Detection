
import os
import numpy as np


class Report:

    report_dir = "Reports"

    report_header = "Classifier Name, Dataset Name, Malware Rate Train, Malware Rate Test, Accuracy," \
                    "Normalized true positive, Normalized true negative, Normalized false negative," \
                    "Normalized false positive, Unnormalized true positive, Unnormalized true negative," \
                    "Unnormalized false negative, Unnormalized false positive\n"

    def __init__(self):
        self.new_report = ""
        self.curr_report_num = self.calculate_current_report_number()
        self.curr_report_dir = os.path.join(Report.report_dir, str(self.curr_report_num))

    def build_report(self, classifier_name, dataset_name, malware_rate_train, malware_rate_test, accuracy,
                     conf_matrix_norm, conf_matrix_unnorm):

        temp_rep = list()

        temp_rep.append(classifier_name)
        temp_rep.append(dataset_name)
        temp_rep.append(malware_rate_train)
        temp_rep.append(malware_rate_test)
        temp_rep.append(accuracy)

        for i in np.nditer(conf_matrix_norm):
            temp_rep.append(float(i))

        for i in np.nditer(conf_matrix_unnorm):
            temp_rep.append(int(i))

        #global NEW_REPORT
        #for i in temp_rep:
        #    NEW_REPORT += str(i)
        #    NEW_REPORT += ','
        self.new_report = ','.join(str(i) for i in temp_rep)


        #NEW_REPORT = NEW_REPORT[:-1]
        self.new_report += "\n"

    def does_report_folder_exist(self):
        return os.path.isdir(Report.report_dir)

    def does_curr_report_folder_exist(self):
        return os.path.isdir(self.curr_report_dir)

    def calculate_current_report_number(self):
        if self.does_report_folder_exist():
            return len(os.listdir(Report.report_dir)) + 1

        else:  # Not necessary if method is always called after creating the Reports directory.
            return 1

    def create_new_report_directory(self):

        if not self.does_report_folder_exist():
            os.mkdir(Report.report_dir)

        #existing_reports = os.listdir(Report.report_dir)

        #curr_report_num = len(existing_reports) + 1

        #new_report_dir = os.path.join(Report.report_dir, str(curr_report_num))
        if not self.does_curr_report_folder_exist():
            os.mkdir(self.curr_report_dir)

        #global CURR_REPORT_DIR
        #CURR_REPORT_DIR = new_report_dir

    def save_report(self):

        self.create_new_report_directory()

        with open(os.path.join(self.curr_report_dir, 'report.csv'), 'w') as new_report:
            new_report.write(Report.report_header)
            new_report.write(self.new_report)

    def list_reports(self):
        return ' '.join(os.listdir(Report.report_dir))
