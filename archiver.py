
import os
import pickle


class ClassifierArchiver:

    classifier_dir = "Classifiers"
    file_extension = ".pickle"

    def does_classifier_folder_exist(self):
        return os.path.isdir(ClassifierArchiver.classifier_dir)

    def calculate_next_classifier_num(self):
        if self.does_classifier_folder_exist():
            return os.listdir(ClassifierArchiver.classifier_dir) + 1
        return None

    @staticmethod
    def archive_classifier(classifier_to_archive):

        try:
            os.mkdir(ClassifierArchiver.classifier_dir)
        except FileExistsError:
            pass

        next_classifier = type(classifier_to_archive).__name__ + "_" + \
            str(len(os.listdir(ClassifierArchiver.classifier_dir)) + 1) + ClassifierArchiver.file_extension

        pickle_path = os.path.join(ClassifierArchiver.classifier_dir, next_classifier)

        with open(pickle_path, 'wb') as pickle_file:
            pickle.dump(classifier_to_archive, pickle_file)

        return pickle_path

    @staticmethod
    def retrieve_classifier(classifier_file_name):

        classifier_file_name += ClassifierArchiver.file_extension

        try:
            with open(os.path.join(ClassifierArchiver.classifier_dir, classifier_file_name), 'rb') as pickle_file:
                classifier_obj = pickle.load(pickle_file)

        except IOError:
            print(f"Could not open file: {classifier_file_name}")

        return classifier_obj

    @staticmethod
    def delete_classifier(classifier_name):

        classifier_name += ClassifierArchiver.file_extension

        classifier_to_delete = os.path.join(ClassifierArchiver.classifier_dir, classifier_name)

        if os.path.isfile(classifier_to_delete):
            os.remove(classifier_to_delete)
