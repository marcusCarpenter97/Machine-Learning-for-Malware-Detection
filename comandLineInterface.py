
import machineLearningFramework as mlf
import os
import signal
import random
import click

ASCII_ART_DIR = "/home/marcus/PycharmProjects/Final_Project/ASCII art fonts"
CLASSIFIER_NAME = None


def pick_ascii_art():
    ascii_file = random.choice(os.listdir(ASCII_ART_DIR))
    return os.path.join(ASCII_ART_DIR, ascii_file)


def display_ascii_art():
    path_to_ascii_art = pick_ascii_art()

    with open(path_to_ascii_art, "r") as file:
        print(file.read())
        print("Machine Learning Framework")


def prompt_user_with_menu(opt_dict, prompt_msg):

    for opt_num, (opt_name, opt_val) in enumerate(opt_dict.items()):
        click.echo(f"{opt_num} : {opt_name}")

    # Display exit option only on main menu.
    if opt_dict is MAIN_MENU_DICT:
        exit_menu_opt = "Exit"
    else:
        exit_menu_opt = "Return"

    click.echo(f"{len(opt_dict)} : {exit_menu_opt}")

    selected_opt = click.prompt(prompt_msg, default=None)

    if selected_opt == "Return":
        return None

    return selected_opt


def feature_extraction_menu():

    click.echo("\nFeature Extraction Menu\n")

    user_opt = prompt_user_with_menu(mlf.EXTRACTOR_DICT, "Select a feature extraction method")

    if user_opt:
        mlf.feature_extraction(user_opt)


CLASSIFIER_FUNC_DICT = {
    "partition data": mlf.partition_data,
    "train classifier": mlf.train_classifier,
    "classify data": mlf.classify_new_data,
    "calculate accuracy": mlf.calculate_classifier_accuracy,
    "cross validate": mlf.cross_validate,
    "display confusion matrix": mlf.display_confusion_matrix
}


def classifier_functionalities_menu():

    while True:

        click.echo(f"\n{CLASSIFIER_NAME} Menu")

        user_opt = prompt_user_with_menu(CLASSIFIER_FUNC_DICT, "Select an option")

        if user_opt:

            # Some functions require parameters which must be given by the user.
            params = []

            if user_opt == "partition data":
                params.append(float(click.prompt("Specify the size of the test set when partitioning the data (float)")))

            elif user_opt == "cross validate":
                params.append(int(click.prompt("Specify how many partitions are to be done (int)")))

            CLASSIFIER_FUNC_DICT[user_opt](*params)

            click.echo(f"\nFunction {user_opt} successful!\n")
        else:
            # Return if user_opt is None
            return


def classifier_selection_menu():
    global CLASSIFIER_NAME

    if CLASSIFIER_NAME:
        classifier_functionalities_menu()

    else:
        click.echo("\nClassifier Selection Menu\n")

        user_opt = prompt_user_with_menu(mlf.CLASSIFIER_DICT, "Select a classifier")

        if user_opt:
            CLASSIFIER_NAME = mlf.select_classifier(user_opt)
            classifier_functionalities_menu()


def benchmark_menu():

    if CLASSIFIER_NAME:
        click.echo("\nBenchmark Selection Menu\n")

        user_opt = prompt_user_with_menu(mlf.BENCHMARKS_DICT, "Select a benchmark")

        if user_opt:

            params = []

            if user_opt == "Multiple malware rates":

                params.append(
                    float(click.prompt("Specify the size of the test set when partitioning the data (float)")))

                params.append(
                    click.prompt("Should the test malware rates be HIGH (10 - 100%) or LOW (1 - 10%) (HIGH/LOW)"))

            elif user_opt == "Fixed malware rates":
                params.append(
                    float(click.prompt("Specify the size of the test set when partitioning the data (float)")))

                params.append(click.prompt("Specify the training malware rate (float)"))

                params.append(
                    click.prompt("Should the test malware rates be HIGH (10 - 100%) or LOW (1 - 10%) (HIGH/LOW)"))

            # mlf.BENCHMARKS_DICT[user_opt](*params)
            mlf.run_selected_benchmark(user_opt, *params)

            click.echo(f"\nBenchmark {user_opt} successful!\n")

    else:
        click.echo("No classifier selected!")


MAIN_MENU_DICT = {
    "cuckoo sandbox": mlf.cuckoo_sandbox,
    "feature extraction": feature_extraction_menu,
    "classifier": classifier_selection_menu,
    "benchmark classifier": benchmark_menu
}


def main_menu():

    click.echo("\nMain Menu\n")

    user_opt = prompt_user_with_menu(MAIN_MENU_DICT, "Select an option")

    if user_opt == "Exit":
        os.kill(os.getpid(), signal.SIGKILL)

    return user_opt


if __name__ == "__main__":

    display_ascii_art()

    while True:
        try:
            MAIN_MENU_DICT[main_menu()]()

        except KeyError:
            click.echo("Invalid menu option!\n")

        except click.Abort:
            print("\nExit")
            break
