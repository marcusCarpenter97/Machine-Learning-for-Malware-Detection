
from sklearn.model_selection import train_test_split


class Dataset:

    def __init__(self):
        self.features = []
        self.labels = []
        self.feature_names = []
        self.label_names = ["Benign", "Malware"]
        self.data_set_directory = "/home/marcus/PycharmProjects/Final_Project/extracted_json_data.csv"

    def load_data(self, desired_malware_present):

        self.clear_dataset()

        try:
            with open(self.data_set_directory) as csv_file:
                self.feature_names = csv_file.readline().split(", ")
                text = csv_file.read().splitlines()

            del self.feature_names[-1]

            for line in text:
                line = line.split(", ")
                self.features.append([float(line[0]), float(line[1]), float(line[2]), float(line[3]), float(line[4]), float(line[5])])
                self.labels.append(self.label_names[line[6] == "True"])

            self.adjust_data(desired_malware_present)

        except IOError:
            print(f"Could not open file: {self.data_set_directory}")

    def partition_data(self, test_size):
        return train_test_split(self.features, self.labels, test_size=test_size)

    def adjust_data(self, desired_malware_present):

        benign_count = 0
        malware_count = 0

        for label in self.labels:
            if label == "Malware":
                malware_count += 1  # 343 (0.33)
            else:
                benign_count += 1  # 687 (0.67)

        current_malware_present = (malware_count / len(self.labels))

        # Decrease amount of malware in the data
        if current_malware_present > desired_malware_present:
            amount_to_remove = int(malware_count - ((benign_count / (1 - desired_malware_present)) * desired_malware_present))

            self.labels = self.labels[:len(self.labels) - amount_to_remove]
            self.features = self.features[:len(self.features) - amount_to_remove]

        # Increase amount of malware in the data
        if desired_malware_present > current_malware_present:

            desired_benign_present = 1 - desired_malware_present

            temp =((malware_count / (1 - desired_benign_present)) * desired_benign_present)
            amount_to_remove = int(benign_count - temp)

            self.labels = self.labels[amount_to_remove:]
            self.features = self.features[amount_to_remove:]


    def clear_dataset(self):
        del self.features[:]
        del self.labels[:]
        del self.feature_names[:]

    def load_mist_data(self):
        return True  # TODO: implement load mist data.
