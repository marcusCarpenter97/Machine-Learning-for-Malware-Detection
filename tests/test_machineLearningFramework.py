
import os
import pytest
import numpy
import machineLearningFramework as mlf
from dataset import Dataset


@pytest.fixture(autouse=True)
def clean_up():

    mlf.DATA_MANAGER = Dataset()

    mlf.CLASSIFIER = None

    mlf.TRAINING_SET_SIZE = 0

    for key, item in mlf.PARTITIONED_DATA_DICT.items():
        del item[:]


def test_data_manager():
    assert isinstance(mlf.DATA_MANAGER, Dataset)


def test_valid_feature_extraction():

    # valid_option = "Cuckoo JSON"

    # mlf.feature_extraction(valid_option)
    # TODO: refactor this !!!
    pytest.fail("Takes too long to run!")


def test_invalid_feature_extraction():

    invalid_option = "ghlkfdhgo30"

    mlf.feature_extraction(invalid_option)


def test_load_json_data_valid_parameter():

    malware_rate = 0.33

    mlf.load_json_data(malware_rate)


def test_load_json_data_invalid_parameter():

    malware_rate = "invalid!"

    mlf.load_json_data(malware_rate)


def test_valid_input_partition_data():

    malware_rate = 0.67
    valid_input = 0.23

    mlf.load_json_data(malware_rate)

    mlf.partition_data(valid_input)

    success_count = 0

    for key, item in mlf.PARTITIONED_DATA_DICT.items():
        if item:
            success_count += 1

    assert success_count == len(mlf.PARTITIONED_DATA_DICT)


def test_invalid_input_partition_data():

    malware_rate = 0.87
    valid_input = "invalid!"

    mlf.load_json_data(malware_rate)

    with pytest.raises(ValueError):
        mlf.partition_data(valid_input)


def test_valid_input_select_classifier():

    valid_input = "Decision Tree"

    ret_val = mlf.select_classifier(valid_input)

    assert (isinstance(ret_val, str) and mlf.CLASSIFIER is not None)


def test_invalid_input_select_classifier():

    invalid_input = 37246

    print(mlf.CLASSIFIER)

    mlf.select_classifier(invalid_input)

    print(mlf.CLASSIFIER)

    assert mlf.CLASSIFIER is None


def test_train_classifier_without_classifier():

    ret_val = mlf.train_classifier()

    assert isinstance(ret_val, str)


def test_train_classifier_with_classifier():

    malware_rate = 0.45
    partition_size = 0.92

    mlf.load_json_data(malware_rate)

    mlf.partition_data(partition_size)

    mlf.select_classifier("Decision Tree")

    mlf.train_classifier()


def test_classify_new_data_with_classifier():

    malware_rate = 0.33
    partition_size = 0.33

    mlf.load_json_data(malware_rate)

    mlf.partition_data(partition_size)

    mlf.select_classifier("Decision Tree")

    mlf.train_classifier()

    ret_val = mlf.classify_new_data()

    assert isinstance(ret_val, numpy.ndarray)


def test_classify_new_data_without_classifier():

    ret_val = mlf.classify_new_data()

    assert isinstance(ret_val, str)


def test_calculate_classifier_accuracy_with_classifier():

    malware_rate = 0.33
    partition_size = 0.33

    mlf.load_json_data(malware_rate)

    mlf.partition_data(partition_size)

    mlf.select_classifier("Decision Tree")

    mlf.train_classifier()

    ret_val = mlf.calculate_classifier_accuracy()

    assert isinstance(ret_val, float)


def test_calculate_classifier_accuracy_without_classifier():

    ret_val = mlf.calculate_classifier_accuracy()

    assert isinstance(ret_val, str)


def test_cross_validate_with_classifier():

    k_fold = 5
    malware_rate = 0.33

    mlf.load_json_data(malware_rate)  # TODO: value error

    mlf.select_classifier("Decision Tree")

    ret_val = mlf.cross_validate(k_fold)

    assert isinstance(ret_val, numpy.ndarray)


def test_cross_validate_without_classifier():

    k_fold = 5

    ret_val = mlf.cross_validate(k_fold)

    assert isinstance(ret_val, str)


def test_cross_validate_without_loading_data():

    k_fold = 5

    mlf.select_classifier("Decision Tree")

    ret_val = mlf.cross_validate(k_fold)

    assert isinstance(ret_val, str)


def test_cross_validate_with_invalid_k_fold():

    k_fold = "invalid!"
    malware_rate = 0.33

    mlf.load_json_data(malware_rate)

    mlf.select_classifier("Decision Tree")

    ret_val = mlf.cross_validate(k_fold)

    assert isinstance(ret_val, str)


def test_display_confusion_matrix_pass():

    malware_rate = 0.33
    partition_size = 0.33

    mlf.REPORT.create_new_report_directory()

    mlf.load_json_data(malware_rate)

    mlf.partition_data(partition_size)

    mlf.select_classifier("Decision Tree")

    mlf.train_classifier()

    mlf.classify_new_data()

    mlf.display_confusion_matrix()


def test_display_confusion_matrix_without_classifier():

    malware_rate = 0.33
    partition_size = 0.33

    mlf.load_json_data(malware_rate)

    mlf.partition_data(partition_size)

    mlf.classify_new_data()

    ret_val = mlf.display_confusion_matrix()

    assert isinstance(ret_val, str)


def test_classifier_does_not_exist_error():

    assert isinstance(mlf.classifier_does_not_exist_error(), str)


def test_run_selected_benchmark_invalid_arguments():

    args = []
    args_num = 1000

    for i in range(args_num):
        args.append(1)

    benchmark_name = "Fixed malware rates"

    mlf.run_selected_benchmark(benchmark_name)


def test_run_selected_benchmark_invalid_benchmark():

    benchmark_name = 123

    mlf.run_selected_benchmark(benchmark_name)


def test_cuckoo_sandbox():
    pytest.fail("Not implemented!")


def test_save_classifier():

    mlf.select_classifier("Decision Tree")

    existing_classifiers = os.listdir("Classifiers")

    pickle_path = os.path.split(mlf.save_classifier())[1]

    # Check if a file was created and if is is unique
    assert (os.path.isfile(pickle_path) and (pickle_path not in existing_classifiers))


def test_load_classifier():

    mlf.select_classifier("Decision Tree")

    classifier_before_saving = mlf.CLASSIFIER

    mlf.save_classifier()

    mlf.load_classifier()

    assert classifier_before_saving == mlf.CLASSIFIER


def test_delete_classifier():
    pytest.fail("Not implemented!")
