
from sklearn import tree
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import cross_val_score
import graphviz


class DecisionTreeClassifier:

    def __init__(self):
        self.classifier = tree.DecisionTreeClassifier()
        self.accuracy = 0
        self.cross_score = None
        self.predicted_labels = []
        self.confusion_matrix = []

    def cross_validate(self, data, labels, k_folds):
        self.cross_score = cross_val_score(self.classifier, data, labels, cv=k_folds)

    def fit(self, training_data, training_labels):
        self.classifier.fit(training_data, training_labels)

    def predict(self, testing_data):
        self.predicted_labels = self.classifier.predict(testing_data)

    def calculate_accuracy(self, testing_data, testing_labels):
        self.accuracy = self.classifier.score(testing_data, testing_labels)

    def export_tree_as_pdf(self, feature_names, label_names):
        dot_data = tree.export_graphviz(self.classifier, out_file=None,
                                        feature_names=feature_names,
                                        class_names=label_names,
                                        filled=True, rounded=True,
                                        special_characters=True)

        graph = graphviz.Source(dot_data)
        graph.render(filename="Decision_Tree", directory="/home/marcus/PycharmProjects/Final_Project/Images")

    def create_confusion_matrix(self, testing_labels, label_names):
        self.confusion_matrix = confusion_matrix(testing_labels, self.predicted_labels, labels=label_names)

    def print_confusion_matrix(self):
        print(f"Confusion Matrix\n        Benign | Malware"
              f"\nBenign  {self.confusion_matrix[0][0]}    | {self.confusion_matrix[0][1]}"
              f"\nMalware {self.confusion_matrix[1][0]}      | {self.confusion_matrix[1][1]}")
